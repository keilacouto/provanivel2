package com.keilacouto.provanivel2;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import com.keilacouto.provanivel2.exceptions.EmployeeNotFoundException;
import com.keilacouto.provanivel2.model.Employee;
import com.keilacouto.provanivel2.repositories.EmployeeRepository;
import com.keilacouto.provanivel2.service.impl.EmployeeServiceImpl;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

import java.util.Optional;
import java.util.UUID;


@ExtendWith(MockitoExtension.class)
public class EmployeeServiceTest {

	@Mock
    private EmployeeRepository repository;

    @InjectMocks
    private EmployeeServiceImpl service;
    
	@Test
    void should_save_one_employee() {
        // Preparar
        Employee entity = new Employee(null,"Func test", "ti");
        when(repository.save(any(Employee.class))).thenReturn(entity);

        // Executar
        Employee saved = service.save(entity);

        // Verificar
        assertThat(saved).isNotNull();
        
        verify(repository, times(1)).save(any(Employee.class));
        
    }
	
	
	@Test
    void should_not_found_a_employee_that_doesnt_exists() {
        // Arrange
        when(repository.findById(any(UUID.class))).thenReturn(Optional.empty());

        // Act & Assert
        Assertions.assertThrows(EmployeeNotFoundException.class, () -> service.findById(UUID.randomUUID()));
        verify(repository, times(1)).findById(anyInt());
        verifyNoMoreInteractions(repository);
    }
}
