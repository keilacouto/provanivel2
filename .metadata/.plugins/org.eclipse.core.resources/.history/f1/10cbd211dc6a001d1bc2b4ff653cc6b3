package com.keilacouto.provanivel2;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import com.keilacouto.provanivel2.enums.EnumStatusPedido;
import com.keilacouto.provanivel2.model.ItemPedido;
import com.keilacouto.provanivel2.model.Pedido;
import com.keilacouto.provanivel2.repositories.PedidoRepository;
import com.keilacouto.provanivel2.service.impl.PedidoServiceImpl;

@ExtendWith(MockitoExtension.class)
public class PedidoServiceTest {
	
	@Mock
	private PedidoRepository pedidoRepository;
	
	@InjectMocks
    private PedidoServiceImpl pedidoService;
	
	@Test
	void should_save_one_pedido() {
	
		//Preparar
		Date dataPedido = new Date();
		Pedido pedido = new Pedido(null, dataPedido, new BigDecimal(190.0), 
				new BigDecimal(171.0), EnumStatusPedido.ABERTO, new ArrayList<ItemPedido>());		
	
		//Executar
		Pedido saved = pedidoService.save(pedido);
		
		//Verificar
		assertThat(saved).isNotNull();
        
        assertThat(saved.getDataPedido()).isEqualTo(dataPedido);
        assertThat(saved.getValorTotalBruto()).isEqualTo(new BigDecimal(190.0));
        assertThat(saved.getValorTotalLiquido()).isEqualTo(new BigDecimal(171.0);
        assertThat(saved.getStatus()).isEqualTo(EnumStatusPedido.ABERTO);
        assertThat(saved.getItensPedido()).isEqualTo(new ArrayList<ItemPedido>());
        
        verify(itemPedidoRepository, times(1)).save(any(ItemPedido.class));
	}
	

}
