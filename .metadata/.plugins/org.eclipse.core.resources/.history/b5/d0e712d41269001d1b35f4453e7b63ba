package com.keilacouto.provanivel2;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.verifyNoMoreInteractions;
import static org.mockito.Mockito.when;

import org.junit.jupiter.api.DisplayNameGeneration;
import org.junit.jupiter.api.DisplayNameGenerator;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import com.keilacouto.provanivel2.enums.EnumStatusProduto;
import com.keilacouto.provanivel2.enums.EnumTipoProduto;
import com.keilacouto.provanivel2.model.Produto;
import com.keilacouto.provanivel2.repositories.ProdutoRepository;
import com.keilacouto.provanivel2.service.ProdutoService;

@ExtendWith(MockitoExtension.class)
@DisplayNameGeneration(DisplayNameGenerator.ReplaceUnderscores.class)
public class ProdutoServiceTest {

	@InjectMocks
    private ProdutoService produtoService;
    
	@Mock
    private ProdutoRepository repository;

    @Test
    void should_save_one_produto() {
        // Arrange
        final var produtoToSave = Produto.builder()
        		.descricao("Produto 1")
                .valorUnitario(150.0)
                .tipo(EnumTipoProduto.PRODUTO)
                .status(EnumStatusProduto.ATIVO)
                .build();
        when(repository.save(any(Produto.class))).thenReturn(produtoToSave);

        // Act
        final var actual = produtoService.save(new Produto());

        // Assert
        assertThat(actual).usingRecursiveComparison().isEqualTo(produtoToSave);
        verify(repository, times(1)).save(any(Produto.class));
        verifyNoMoreInteractions(repository);
    }
    
       
}
