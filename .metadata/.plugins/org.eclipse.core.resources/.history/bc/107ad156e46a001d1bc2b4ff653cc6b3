package com.keilacouto.provanivel2;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.math.BigDecimal;
import java.util.Optional;
import java.util.UUID;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import com.keilacouto.provanivel2.enums.EnumStatusProduto;
import com.keilacouto.provanivel2.enums.EnumTipoProduto;
import com.keilacouto.provanivel2.exceptions.ProdutoNotFoundException;
import com.keilacouto.provanivel2.model.Produto;
import com.keilacouto.provanivel2.repositories.ProdutoRepository;
import com.keilacouto.provanivel2.service.impl.ProdutoServiceImpl;


@ExtendWith(MockitoExtension.class)
public class ProdutoServiceTest {

	@Mock
    private ProdutoRepository repository;

    @InjectMocks
    private ProdutoServiceImpl service;
    
	@Test
    void should_save_one_produto() {
        // Preparar
        Produto entity = new Produto(null,"Produto 1", new BigDecimal(20.0), EnumTipoProduto.PRODUTO, 
        		EnumStatusProduto.ATIVO);
        when(repository.save(any(Produto.class))).thenReturn(entity);

        // Executar
        Produto saved = service.save(entity);

        // Verificar
        assertThat(saved).isNotNull();
        
        assertThat(saved.getDescricao()).isEqualTo("Produto 1");
        assertThat(saved.getValorUnitario()).isEqualTo(new BigDecimal(20.0));
        assertThat(saved.getTipo()).isEqualTo(EnumTipoProduto.PRODUTO);
        assertThat(saved.getStatus()).isEqualTo(EnumStatusProduto.ATIVO);
        
        verify(repository, times(1)).save(any(Produto.class));
        
    }
	
	
	@Test
    void should_not_found_a_produto_that_doesnt_exists() {
        // Preparar
        when(repository.findById(any(UUID.class))).thenReturn(Optional.empty());

        // Executa e verifica
        Assertions.assertThrows(ProdutoNotFoundException.class, () -> {
        	
        	service.findById(UUID.randomUUID());
        	
        });
        
        verify(repository, times(1)).findById(any(UUID.class));
        
    }
	
	@Test
    void should_found_a_produto_that_exists() {
		
		UUID id = UUID.randomUUID();
		Produto entity = new Produto(id,"Func test", "ti");
        // Preparar
        when(repository.findById(id)).thenReturn(Optional.of(entity));

        // Executa e verifica
        Produto actual = service.findById(id);
        
        assertThat(actual).isNotNull();
        
        assertThat(actual.getName()).isEqualTo("Func test");
        assertThat(actual.getDept()).isEqualTo("ti");
        
        verify(repository, times(1)).findById(id);
        
    }
}
