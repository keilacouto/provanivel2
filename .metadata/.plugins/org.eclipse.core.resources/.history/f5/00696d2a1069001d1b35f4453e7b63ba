package com.keilacouto.provanivel2;

import com.fasterxml.jackson.databind.ObjectMapper;

import org.junit.jupiter.api.Test;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.ResultActions;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import static org.hamcrest.CoreMatchers.is;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.BDDMockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;

import com.keilacouto.provanivel2.enums.EnumStatusProduto;
import com.keilacouto.provanivel2.enums.EnumTipoProduto;
import com.keilacouto.provanivel2.model.Produto;
import com.keilacouto.provanivel2.service.ProdutoService;

@WebMvcTest
public class ProdutoServiceTest {

	@Autowired
    private MockMvc mockMvc;

    @MockBean
    private ProdutoService produtoService;

    @Autowired
    private ObjectMapper objectMapper;	
    
    @Test
    public void givenProdutoObject_whenCreateProduto_thenReturnSavedProduto() throws Exception{

        // given - precondition or setup
        Produto produto = Produto.builder()
                .descricao("Produto 1")
                .valorUnitario(150.0)
                .tipo(EnumTipoProduto.PRODUTO)
                .status(EnumStatusProduto.ATIVO)
                .build();
        given(produtoService.save(any(Produto.class)))
                .willAnswer((invocation)-> invocation.getArgument(0));
      
        // when - action or behaviour that we are going test
        ResultActions response = mockMvc.perform(post("/api/produto")
            .contentType(MediaType.APPLICATION_JSON)
            .content(objectMapper.writeValueAsString(produto)));

        // then - verify the result or output using assert statements
        response.andDo(print()).
                andExpect(status().isCreated())
                .andExpect(jsonPath("$.firstName",
                        is(produto.getFirstName())))
                .andExpect(jsonPath("$.lastName",
                        is(produto.getLastName())))
                .andExpect(jsonPath("$.email",
                        is(produto.getEmail())));

    }
    
}
